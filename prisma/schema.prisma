generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String?
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String        @id @default(cuid())
  name            String
  email           String        @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  faculty         String?
  absentNumber    String?
  phoneNumber     String?
  emergencyNumber String?
  lineId          String?
  instagram       String?
  role            String?
  birthPlace      String?
  birthDate       String?
  major           String?
  accounts        Account[]
  comments        Comment[]
  commentLikes    CommentLike[]
  posts           Post[]
  replies         Reply[]
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  authorEmail String?
  createdAt   DateTime  @default(now())
  comments    Comment[]
  author      User?     @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
}

model Comment {
  id           String        @id @default(cuid())
  text         String
  author       User?         @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  authorEmail  String?
  Post         Post?         @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String?
  createdAt    DateTime      @default(now())
  replies      Reply[]
  commentLikes CommentLike[]
}

model CommentLike {
  id          String   @id @default(cuid())
  authorEmail String?
  commentId   String?
  createdAt   DateTime @default(now())
  author      User?    @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  comment     Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Reply {
  id          String   @id @default(cuid())
  text        String
  authorEmail String?
  commentId   String?
  createdAt   DateTime @default(now())
  author      User?    @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  comment     Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Event {
  id          String   @id @default(uuid())
  title       String
  date        DateTime // due date for Tugas, occurence date for Day
  description String
  tugas       Tugas?
  day         Day?
}

model Tugas {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  fileLink  String?
  grade     String   @default("Not Graded")
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String   @unique
}

model Day {
  id      String @id @default(uuid())
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String @unique
}
