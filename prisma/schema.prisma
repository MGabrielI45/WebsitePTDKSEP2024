generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  name            String?
  email           String?       @unique
  password        String
  emailVerified   DateTime?
  image           String?
  birthTimePlace  String?
  faculty         String?
  absentNumber    Int?
  phoneNumber     Int?
  emergencyNumber Int?
  lineId          String?
  instagram       String?
  username        String        @unique
  Account         Account[]
  Comment         Comment[]
  CommentLike     CommentLike[]
  Post            Post[]
  Reply           Reply[]
  Session         Session[]
}

model Reminder {
  id              String   @id @default(uuid())
  title           String
  descriptionLink String
  deadlineDate    DateTime
}

model Tugas {
  id           String   @id @default(uuid())
  title        String
  deadlineDate DateTime
  description  String
  fileLink     String?
  grade        String   @default("Not Graded")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String?
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Comment {
  id          String        @id
  text        String
  authorEmail String?
  postId      String?
  createdAt   DateTime      @default(now())
  likes       Int           @default(0)
  User        User?         @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  Post        Post?         @relation(fields: [postId], references: [id], onDelete: Cascade)
  CommentLike CommentLike[]
  Reply       Reply[]
}

model CommentLike {
  id          String   @id
  authorEmail String?
  commentId   String?
  createdAt   DateTime @default(now())
  User        User?    @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  Comment     Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Post {
  id          String    @id
  title       String
  content     String
  authorEmail String?
  createdAt   DateTime  @default(now())
  Comment     Comment[]
  User        User?     @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
}

model Reply {
  id          String   @id
  text        String
  authorEmail String?
  commentId   String?
  createdAt   DateTime @default(now())
  User        User?    @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  Comment     Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
