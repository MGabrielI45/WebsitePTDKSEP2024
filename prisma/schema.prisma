generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Reminder {
  id              String   @id @default(uuid())
  title           String
  descriptionLink String
  deadlineDate    DateTime
  description     String
  fileLink        String?
  grade           String    @default("Not Graded")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String?
  providerAccountId  String?
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id            String    @id @default(cuid())
  name          String
  email         String   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  birthPlace     String?
  birthDate      String?
  faculty            String?
  major              String?
  absentNumber       String?
  phoneNumber        String?
  emergencyNumber    String?
  lineId             String?
  instagram          String?
  role               String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  replies       Reply[]
  commentLikes CommentLike[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id String @id @default(cuid())
  title String
  content String
  author User? @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  authorEmail String?
  createdAt DateTime @default(now())
  comments Comment[]
  
}

model Comment {
  id String @id @default(cuid())
  text String
  author User? @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  authorEmail String?
  Post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?
  createdAt DateTime @default(now())
  replies Reply[]
  commentLikes CommentLike[]
}

model CommentLike {
  id String @id @default(cuid())
  author User? @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  authorEmail String?
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
  createdAt DateTime @default(now())

 
}

model Reply {
  id String @id @default(cuid())
  text String
  author User? @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  authorEmail String?
  Comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
  createdAt DateTime @default(now())
}

